// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`zero page x mode error error when operand is incomplete 1`] = `
{
  "errors": [
    {
      "kind": 1,
      "lineRange": {
        "end": [
          1,
          9,
        ],
        "start": [
          1,
          8,
        ],
      },
      "message": "Unexpected identifier: ,, expected the ",Y" part of ZPY mode",
      "range": [
        7,
        8,
      ],
    },
  ],
  "originalLines": [
    "LDA $a1,",
  ],
  "program": {
    "kind": "p",
    "lines": [],
    "range": [
      0,
      8,
    ],
  },
}
`;

exports[`zero page x mode error error when operator is incomplete 1`] = `
{
  "errors": [
    {
      "kind": 1,
      "lineRange": {
        "end": [
          1,
          3,
        ],
        "start": [
          1,
          1,
        ],
      },
      "message": "Unexpected identifier: LD, expected an instruction",
      "range": [
        0,
        2,
      ],
    },
  ],
  "originalLines": [
    "LD $a1,X",
  ],
  "program": {
    "kind": "p",
    "lines": [],
    "range": [
      0,
      8,
    ],
  },
}
`;

exports[`zpx simple  1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA $a1,X",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": undefined,
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              4,
              9,
            ],
            "value": {
              "kind": "vl",
              "originalStringValue": "a1",
              "range": [
                4,
                7,
              ],
              "valueLiteralKind": "hex",
            },
          },
          "operator": {
            "kind": "or",
            "range": [
              0,
              3,
            ],
            "value": "lda",
          },
          "range": [
            0,
            9,
          ],
        },
        "kind": "l",
        "range": [
          0,
          9,
        ],
      },
    ],
    "range": [
      0,
      9,
    ],
  },
}
`;

exports[`zpx simple 2 1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA $a1,x;",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": {
          "kind": "c",
          "range": [
            9,
            10,
          ],
          "value": ";",
        },
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              4,
              9,
            ],
            "value": {
              "kind": "vl",
              "originalStringValue": "a1",
              "range": [
                4,
                7,
              ],
              "valueLiteralKind": "hex",
            },
          },
          "operator": {
            "kind": "or",
            "range": [
              0,
              3,
            ],
            "value": "lda",
          },
          "range": [
            0,
            9,
          ],
        },
        "kind": "l",
        "range": [
          0,
          10,
        ],
      },
    ],
    "range": [
      0,
      10,
    ],
  },
}
`;

exports[`zpx with ascii - multiple 1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA.b "abc",x",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": undefined,
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              6,
              13,
            ],
            "value": {
              "kind": "vl",
              "originalStringValue": "abc",
              "range": [
                6,
                11,
              ],
              "valueLiteralKind": "ascii",
            },
          },
          "operator": {
            "forcedTo": "b",
            "kind": "or",
            "range": [
              0,
              5,
            ],
            "value": "lda",
          },
          "range": [
            0,
            13,
          ],
        },
        "kind": "l",
        "range": [
          0,
          13,
        ],
      },
    ],
    "range": [
      0,
      13,
    ],
  },
}
`;

exports[`zpx with ascii 1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA.b "a",x",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": undefined,
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              6,
              11,
            ],
            "value": {
              "kind": "vl",
              "originalStringValue": "a",
              "range": [
                6,
                9,
              ],
              "valueLiteralKind": "ascii",
            },
          },
          "operator": {
            "forcedTo": "b",
            "kind": "or",
            "range": [
              0,
              5,
            ],
            "value": "lda",
          },
          "range": [
            0,
            11,
          ],
        },
        "kind": "l",
        "range": [
          0,
          11,
        ],
      },
    ],
    "range": [
      0,
      11,
    ],
  },
}
`;

exports[`zpx with binary 1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA.b %0101,x",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": undefined,
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              6,
              13,
            ],
            "value": {
              "kind": "vl",
              "originalStringValue": "0101",
              "range": [
                6,
                11,
              ],
              "valueLiteralKind": "bin",
            },
          },
          "operator": {
            "forcedTo": "b",
            "kind": "or",
            "range": [
              0,
              5,
            ],
            "value": "lda",
          },
          "range": [
            0,
            13,
          ],
        },
        "kind": "l",
        "range": [
          0,
          13,
        ],
      },
    ],
    "range": [
      0,
      13,
    ],
  },
}
`;

exports[`zpx with decimal 1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA.b 12345,x",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": undefined,
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              6,
              13,
            ],
            "value": {
              "kind": "vl",
              "originalStringValue": "12345",
              "range": [
                6,
                11,
              ],
              "valueLiteralKind": "dec",
            },
          },
          "operator": {
            "forcedTo": "b",
            "kind": "or",
            "range": [
              0,
              5,
            ],
            "value": "lda",
          },
          "range": [
            0,
            13,
          ],
        },
        "kind": "l",
        "range": [
          0,
          13,
        ],
      },
    ],
    "range": [
      0,
      13,
    ],
  },
}
`;

exports[`zpx with symbol 1`] = `
{
  "errors": [],
  "originalLines": [
    "LDA.b lbl,x",
  ],
  "program": {
    "kind": "p",
    "lines": [
      {
        "comment": undefined,
        "contents": {
          "instructionKind": 1,
          "kind": "i",
          "operand": {
            "kind": "zpx",
            "range": [
              6,
              11,
            ],
            "value": {
              "kind": "r",
              "range": [
                6,
                9,
              ],
              "referencedName": "lbl",
            },
          },
          "operator": {
            "forcedTo": "b",
            "kind": "or",
            "range": [
              0,
              5,
            ],
            "value": "lda",
          },
          "range": [
            0,
            11,
          ],
        },
        "kind": "l",
        "range": [
          0,
          11,
        ],
      },
    ],
    "range": [
      0,
      11,
    ],
  },
}
`;
