{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Retro Assembler (6502)",
    "patterns": [
        {
            "include": "#strings"
        },
        {
            "include": "#characters"
        },
        {
            "include": "#locallabels"
        },
        {
            "include": "#directives"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#instructions"
        },
        {
            "include": "#instructionsother"
        },
        {
            "include": "#registers"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "strings": {
            "name": "string.quoted.double.retroasm_6502",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.retroasm_6502",
                    "match": "\\\\."
                }
            ]
        },
        "characters": {
            "patterns": [
                {
                    "name": "string.quoted.single.retroasm_6502",
                    "match": "(?i)\\'.\\'"
                }
            ]
        },
        "locallabels": {
            "patterns": [
                {
                    "name": "keyword.locallabel.retroasm_6502",
                    "match": "(?i)\\@+[a-z0-9]+\\b"
                }
            ]
        },
        "directives": {
            "patterns": [
                {
                    "name": "keyword.directive.retroasm_6502",
                    "match": "(?i)(?:^|\\s)(\\.(org|pc|equ|var|random|rnd|storage|ds|fill|align|target|format|cpu|closelabels|breakpoint|print|debug|error|end|region|endregion|function|endfunction|endf|segment|code|lib|data|bss|bank|namespace|include|incbin|macro|endmacro|endm|if|endif|loop|endloop|endl|while|endwhile|endw|break|byte|b|word|w|dword|dw|lobyte|hibyte|loword|hiword|encoding|text|t|textz|stext|ascii|asciiz|generate|memory|memorydump|setting))\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.keyword.retroasm_6502",
                    "match": "(?i)\\b(auto|true|false)\\b"
                }
            ]
        },
        "instructions": {
            "patterns": [
                {
                    "name": "keyword.instruction.retroasm_6502",
                    "match": "(?i)[\\s]*\\b(adc|and|asl|bcc|bcs|beq|bge|bit|blt|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|xor)\\b"
                }
            ]
        },
        "instructionsother": {
            "patterns": [
                {
                    "name": "keyword.instructionother.retroasm_6502",
                    "match": "(?i)[\\s]*\\b(kil|jam|hlt|anc|alr|asr|arr|xaa|lax|axs|ahx|shx|shy|tas|las|lar|slo|aso|sre|lse|rla|rra|lax|sax|dcp|isc|isb)\\b"
                }
            ]
        },
        "registers": {
            "patterns": [
                {
                    "name": "keyword.register.retroasm_6502",
                    "match": "(?i)\\b(a|x|y)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.retroasm_6502",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "comment": "Block comment"
                },
                {
                    "name": "comment.line.retroasm_6502",
                    "begin": "//",
                    "end": "$",
                    "comment": "Single line comment with //"
                },
                {
                    "name": "comment.line.retroasm_6502",
                    "begin": ";",
                    "end": "$",
                    "comment": "Single line comment with ';'"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "include": "#constants-numeric"
                }
            ]
        },
        "constants-numeric": {
            "patterns": [
                {
                    "name": "constant.numeric.binary.retroasm_6502",
                    "match": "(?i)(\\%|0b)[0-1_]+\\b",
                    "comment": "Integer literal (binary)"
                },
                {
                    "name": "constant.numeric.hexadecimal.retroasm_6502",
                    "match": "(?i)(\\$|0x)[0-9a-f_]+\\b",
                    "comment": "Integer literal (hexadecimal)"
                },
                {
                    "name": "constant.numeric.octal.retroasm_6502",
                    "match": "(?i)(0o)[0-7]+\\b",
                    "comment": "Integer literal (octal)"
                },
                {
                    "name": "constant.numeric.decimal.retroasm_6502",
                    "match": "(?i)\\b[0-9]+\\b",
                    "comment": "Integer literal (decimal)"
                },
                {
                    "name": "constant.numeric.hash.retroasm_6502",
                    "match": "\\#",
                    "comment": "Hash"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.retroasm_6502",
                    "match": "(?i)(\\+|\\-|\\=|\\*|\\/|\\!|\\<|\\>|\\&|\\||\\^|\\(|\\)|\\[|\\]\\,)"
                }
            ]
        }
    },
    "scopeName": "source.retroasm_6502"
}